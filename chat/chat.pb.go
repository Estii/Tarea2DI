// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: chat.proto

package chat

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResponseCliente struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retorno int64 `protobuf:"varint,1,opt,name=Retorno,proto3" json:"Retorno,omitempty"`
}

func (x *ResponseCliente) Reset() {
	*x = ResponseCliente{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCliente) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCliente) ProtoMessage() {}

func (x *ResponseCliente) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCliente.ProtoReflect.Descriptor instead.
func (*ResponseCliente) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseCliente) GetRetorno() int64 {
	if x != nil {
		return x.Retorno
	}
	return 0
}

type MessageCliente struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks         []byte `protobuf:"bytes,1,opt,name=Chunks,proto3" json:"Chunks,omitempty"`
	Termino        int64  `protobuf:"varint,2,opt,name=Termino,proto3" json:"Termino,omitempty"`
	ID             int64  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	NombreLibro    string `protobuf:"bytes,4,opt,name=NombreLibro,proto3" json:"NombreLibro,omitempty"`
	CantidadChunks int64  `protobuf:"varint,5,opt,name=CantidadChunks,proto3" json:"CantidadChunks,omitempty"`
	Tipo           int64  `protobuf:"varint,6,opt,name=Tipo,proto3" json:"Tipo,omitempty"`
	Origen         int64  `protobuf:"varint,7,opt,name=origen,proto3" json:"origen,omitempty"`
}

func (x *MessageCliente) Reset() {
	*x = MessageCliente{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCliente) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCliente) ProtoMessage() {}

func (x *MessageCliente) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCliente.ProtoReflect.Descriptor instead.
func (*MessageCliente) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *MessageCliente) GetChunks() []byte {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *MessageCliente) GetTermino() int64 {
	if x != nil {
		return x.Termino
	}
	return 0
}

func (x *MessageCliente) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageCliente) GetNombreLibro() string {
	if x != nil {
		return x.NombreLibro
	}
	return ""
}

func (x *MessageCliente) GetCantidadChunks() int64 {
	if x != nil {
		return x.CantidadChunks
	}
	return 0
}

func (x *MessageCliente) GetTipo() int64 {
	if x != nil {
		return x.Tipo
	}
	return 0
}

func (x *MessageCliente) GetOrigen() int64 {
	if x != nil {
		return x.Origen
	}
	return 0
}

type MessagePropuesta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cantidad1   int64  `protobuf:"varint,1,opt,name=Cantidad1,proto3" json:"Cantidad1,omitempty"`
	Cantidad2   int64  `protobuf:"varint,2,opt,name=Cantidad2,proto3" json:"Cantidad2,omitempty"`
	Cantidad3   int64  `protobuf:"varint,3,opt,name=Cantidad3,proto3" json:"Cantidad3,omitempty"`
	NombreLibro string `protobuf:"bytes,4,opt,name=NombreLibro,proto3" json:"NombreLibro,omitempty"`
	ID          int64  `protobuf:"varint,5,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *MessagePropuesta) Reset() {
	*x = MessagePropuesta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePropuesta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePropuesta) ProtoMessage() {}

func (x *MessagePropuesta) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePropuesta.ProtoReflect.Descriptor instead.
func (*MessagePropuesta) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MessagePropuesta) GetCantidad1() int64 {
	if x != nil {
		return x.Cantidad1
	}
	return 0
}

func (x *MessagePropuesta) GetCantidad2() int64 {
	if x != nil {
		return x.Cantidad2
	}
	return 0
}

func (x *MessagePropuesta) GetCantidad3() int64 {
	if x != nil {
		return x.Cantidad3
	}
	return 0
}

func (x *MessagePropuesta) GetNombreLibro() string {
	if x != nil {
		return x.NombreLibro
	}
	return ""
}

func (x *MessagePropuesta) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ResponsePropuesta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameNodeUsed int64 `protobuf:"varint,1,opt,name=NameNodeUsed,proto3" json:"NameNodeUsed,omitempty"`
	Tiempo       int64 `protobuf:"varint,2,opt,name=tiempo,proto3" json:"tiempo,omitempty"`
}

func (x *ResponsePropuesta) Reset() {
	*x = ResponsePropuesta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePropuesta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePropuesta) ProtoMessage() {}

func (x *ResponsePropuesta) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePropuesta.ProtoReflect.Descriptor instead.
func (*ResponsePropuesta) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ResponsePropuesta) GetNameNodeUsed() int64 {
	if x != nil {
		return x.NameNodeUsed
	}
	return 0
}

func (x *ResponsePropuesta) GetTiempo() int64 {
	if x != nil {
		return x.Tiempo
	}
	return 0
}

type EstadoE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estado int64 `protobuf:"varint,1,opt,name=Estado,proto3" json:"Estado,omitempty"`
}

func (x *EstadoE) Reset() {
	*x = EstadoE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstadoE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstadoE) ProtoMessage() {}

func (x *EstadoE) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstadoE.ProtoReflect.Descriptor instead.
func (*EstadoE) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *EstadoE) GetEstado() int64 {
	if x != nil {
		return x.Estado
	}
	return 0
}

type EstadoS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estado int64 `protobuf:"varint,1,opt,name=Estado,proto3" json:"Estado,omitempty"`
}

func (x *EstadoS) Reset() {
	*x = EstadoS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstadoS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstadoS) ProtoMessage() {}

func (x *EstadoS) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstadoS.ProtoReflect.Descriptor instead.
func (*EstadoS) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *EstadoS) GetEstado() int64 {
	if x != nil {
		return x.Estado
	}
	return 0
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x6f, 0x72, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52, 0x65, 0x74, 0x6f, 0x72, 0x6e, 0x6f, 0x22,
	0xc8, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x4c, 0x69,
	0x62, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72,
	0x65, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64,
	0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69,
	0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x31, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d,
	0x62, 0x72, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x65, 0x6d, 0x70, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x65, 0x6d, 0x70, 0x6f, 0x22, 0x21, 0x0a, 0x07,
	0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x73, 0x74, 0x61, 0x64,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x22,
	0x21, 0x0a, 0x07, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x73,
	0x74, 0x61, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x73, 0x74, 0x61,
	0x64, 0x6f, 0x32, 0xa1, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x4c, 0x69, 0x62, 0x72,
	0x6f, 0x12, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x12,
	0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x45, 0x1a, 0x0d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x53, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x69, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f,
	0x45, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12,
	0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x73,
	0x74, 0x61, 0x64, 0x6f, 0x45, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x73, 0x74,
	0x61, 0x64, 0x6f, 0x53, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x42, 0x6f, 0x72, 0x72, 0x61, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x45, 0x1a, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45,
	0x73, 0x74, 0x61, 0x64, 0x6f, 0x53, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x69,
	0x61, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chat_proto_goTypes = []interface{}{
	(*ResponseCliente)(nil),   // 0: chat.ResponseCliente
	(*MessageCliente)(nil),    // 1: chat.MessageCliente
	(*MessagePropuesta)(nil),  // 2: chat.MessagePropuesta
	(*ResponsePropuesta)(nil), // 3: chat.ResponsePropuesta
	(*EstadoE)(nil),           // 4: chat.EstadoE
	(*EstadoS)(nil),           // 5: chat.EstadoS
}
var file_chat_proto_depIdxs = []int32{
	1, // 0: chat.ChatService.EnviarLibro:input_type -> chat.MessageCliente
	4, // 1: chat.ChatService.CheckEstado:input_type -> chat.EstadoE
	1, // 2: chat.ChatService.SubirChunk:input_type -> chat.MessageCliente
	2, // 3: chat.ChatService.EnviarPropuesta:input_type -> chat.MessagePropuesta
	4, // 4: chat.ChatService.CheckNameNodeUse:input_type -> chat.EstadoE
	4, // 5: chat.ChatService.BorrarArchivos:input_type -> chat.EstadoE
	1, // 6: chat.ChatService.EnviarChunks:input_type -> chat.MessageCliente
	0, // 7: chat.ChatService.EnviarLibro:output_type -> chat.ResponseCliente
	5, // 8: chat.ChatService.CheckEstado:output_type -> chat.EstadoS
	0, // 9: chat.ChatService.SubirChunk:output_type -> chat.ResponseCliente
	3, // 10: chat.ChatService.EnviarPropuesta:output_type -> chat.ResponsePropuesta
	5, // 11: chat.ChatService.CheckNameNodeUse:output_type -> chat.EstadoS
	5, // 12: chat.ChatService.BorrarArchivos:output_type -> chat.EstadoS
	1, // 13: chat.ChatService.EnviarChunks:output_type -> chat.MessageCliente
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCliente); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCliente); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePropuesta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePropuesta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstadoE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstadoS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	EnviarLibro(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*ResponseCliente, error)
	CheckEstado(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error)
	SubirChunk(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*ResponseCliente, error)
	EnviarPropuesta(ctx context.Context, in *MessagePropuesta, opts ...grpc.CallOption) (*ResponsePropuesta, error)
	CheckNameNodeUse(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error)
	BorrarArchivos(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error)
	EnviarChunks(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*MessageCliente, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) EnviarLibro(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*ResponseCliente, error) {
	out := new(ResponseCliente)
	err := c.cc.Invoke(ctx, "/chat.ChatService/EnviarLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckEstado(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error) {
	out := new(EstadoS)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CheckEstado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SubirChunk(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*ResponseCliente, error) {
	out := new(ResponseCliente)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SubirChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EnviarPropuesta(ctx context.Context, in *MessagePropuesta, opts ...grpc.CallOption) (*ResponsePropuesta, error) {
	out := new(ResponsePropuesta)
	err := c.cc.Invoke(ctx, "/chat.ChatService/EnviarPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckNameNodeUse(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error) {
	out := new(EstadoS)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CheckNameNodeUse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) BorrarArchivos(ctx context.Context, in *EstadoE, opts ...grpc.CallOption) (*EstadoS, error) {
	out := new(EstadoS)
	err := c.cc.Invoke(ctx, "/chat.ChatService/BorrarArchivos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EnviarChunks(ctx context.Context, in *MessageCliente, opts ...grpc.CallOption) (*MessageCliente, error) {
	out := new(MessageCliente)
	err := c.cc.Invoke(ctx, "/chat.ChatService/EnviarChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	EnviarLibro(context.Context, *MessageCliente) (*ResponseCliente, error)
	CheckEstado(context.Context, *EstadoE) (*EstadoS, error)
	SubirChunk(context.Context, *MessageCliente) (*ResponseCliente, error)
	EnviarPropuesta(context.Context, *MessagePropuesta) (*ResponsePropuesta, error)
	CheckNameNodeUse(context.Context, *EstadoE) (*EstadoS, error)
	BorrarArchivos(context.Context, *EstadoE) (*EstadoS, error)
	EnviarChunks(context.Context, *MessageCliente) (*MessageCliente, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) EnviarLibro(context.Context, *MessageCliente) (*ResponseCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarLibro not implemented")
}
func (*UnimplementedChatServiceServer) CheckEstado(context.Context, *EstadoE) (*EstadoS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEstado not implemented")
}
func (*UnimplementedChatServiceServer) SubirChunk(context.Context, *MessageCliente) (*ResponseCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubirChunk not implemented")
}
func (*UnimplementedChatServiceServer) EnviarPropuesta(context.Context, *MessagePropuesta) (*ResponsePropuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarPropuesta not implemented")
}
func (*UnimplementedChatServiceServer) CheckNameNodeUse(context.Context, *EstadoE) (*EstadoS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNameNodeUse not implemented")
}
func (*UnimplementedChatServiceServer) BorrarArchivos(context.Context, *EstadoE) (*EstadoS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarArchivos not implemented")
}
func (*UnimplementedChatServiceServer) EnviarChunks(context.Context, *MessageCliente) (*MessageCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarChunks not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_EnviarLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EnviarLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/EnviarLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EnviarLibro(ctx, req.(*MessageCliente))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CheckEstado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckEstado(ctx, req.(*EstadoE))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SubirChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SubirChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SubirChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SubirChunk(ctx, req.(*MessageCliente))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EnviarPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePropuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EnviarPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/EnviarPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EnviarPropuesta(ctx, req.(*MessagePropuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckNameNodeUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckNameNodeUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CheckNameNodeUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckNameNodeUse(ctx, req.(*EstadoE))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_BorrarArchivos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).BorrarArchivos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/BorrarArchivos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).BorrarArchivos(ctx, req.(*EstadoE))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EnviarChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCliente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EnviarChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/EnviarChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EnviarChunks(ctx, req.(*MessageCliente))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarLibro",
			Handler:    _ChatService_EnviarLibro_Handler,
		},
		{
			MethodName: "CheckEstado",
			Handler:    _ChatService_CheckEstado_Handler,
		},
		{
			MethodName: "SubirChunk",
			Handler:    _ChatService_SubirChunk_Handler,
		},
		{
			MethodName: "EnviarPropuesta",
			Handler:    _ChatService_EnviarPropuesta_Handler,
		},
		{
			MethodName: "CheckNameNodeUse",
			Handler:    _ChatService_CheckNameNodeUse_Handler,
		},
		{
			MethodName: "BorrarArchivos",
			Handler:    _ChatService_BorrarArchivos_Handler,
		},
		{
			MethodName: "EnviarChunks",
			Handler:    _ChatService_EnviarChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
